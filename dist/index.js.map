{
  "version": 3,
  "sources": ["../lib/polyval_p.js", "../lib/polyval_q.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.40000972152;\n\t}\n\treturn 0.40000972152 + (x * 0.24279078841);\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.66666662693;\n\t}\n\treturn 0.66666662693 + (x * 0.28498786688);\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/12.2.0/lib/msun/src/e_logf.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar toWordf = require( '@stdlib/number-float32-base-to-word' );\nvar fromWordf = require( '@stdlib/number-float32-base-from-word' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar NINF = require( '@stdlib/constants-float32-ninf' );\nvar FLOAT32_EXPONENT_MASK = require( '@stdlib/constants-float32-exponent-mask' );\nvar FLOAT32_EXPONENT_BIAS = require( '@stdlib/constants-float32-exponent-bias' );\nvar FLOAT32_SIGNIFICAND_MASK = require( '@stdlib/constants-float32-significand-mask' );\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\nvar polyvalP = require( './polyval_p.js' );\nvar polyvalQ = require( './polyval_q.js' );\n\n\n// VARIABLES //\n\nvar LN2_HI = 6.9313812256e-01; // 0x3f317180\nvar LN2_LO = 9.0580006145e-06; // 0x3717f7d1\nvar TWO25 = 3.355443200e+07;   // 0x4c000000\nvar ONE_THIRD = 0.33333333333333333;\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of a single-precision floating-point number.\n*\n* @param {NonNegativeNumber} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = lnf( 4.0 );\n* // returns ~1.386\n*\n* @example\n* var v = lnf( 0.0 );\n* // returns -Infinity\n*\n* @example\n* var v = lnf( Infinity );\n* // returns Infinity\n*\n* @example\n* var v = lnf( NaN );\n* // returns NaN\n*\n* @example\n* var v = lnf( -4.0 );\n* // returns NaN\n*/\nfunction lnf( x ) {\n\tvar hfsq;\n\tvar ix;\n\tvar t2;\n\tvar t1;\n\tvar dk;\n\tvar k;\n\tvar R;\n\tvar f;\n\tvar i;\n\tvar j;\n\tvar s;\n\tvar w;\n\tvar z;\n\n\tif ( x === 0.0 ) {\n\t\treturn NINF;\n\t}\n\tif ( isnan( x ) || x < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tx = float64ToFloat32( x );\n\tix = toWordf( x );\n\tk = 0;\n\n\t// x < 2**-126\n\tif ( ix < 0x00800000 ) {\n\t\tk = float64ToFloat32( k - 25 );\n\n\t\t// Subnormal number, scale up x\n\t\tx = float64ToFloat32( x * TWO25 );\n\t\tix = toWordf( x );\n\t}\n\tif ( ix >= FLOAT32_EXPONENT_MASK ) {\n\t\treturn float64ToFloat32( x + x );\n\t}\n\tk = float64ToFloat32( k + float64ToFloat32( ( ix >> 23 ) - FLOAT32_EXPONENT_BIAS ) ); // eslint-disable-line max-len\n\tix &= FLOAT32_SIGNIFICAND_MASK;\n\ti = float64ToFloat32( ix + ( 0x95f64 << 3 ) ) & 0x800000;\n\n\t// Normalize x or x/2\n\tx = fromWordf( ix | ( i ^ 0x3f800000 ) );\n\tk = float64ToFloat32( k + ( i >> 23 ) );\n\tf = float64ToFloat32( x - 1.0 );\n\n\t// -2**-9 <= f < 2**-9\n\tif ( ( FLOAT32_SIGNIFICAND_MASK & float64ToFloat32( 0x8000 + ix ) ) < 0xc000 ) { // eslint-disable-line max-len\n\t\tif ( f === 0.0 ) {\n\t\t\tif ( k === 0 ) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\tdk = k;\n\t\t\treturn float64ToFloat32( float64ToFloat32( dk * LN2_HI ) + float64ToFloat32( dk * LN2_LO ) ); // eslint-disable-line max-len\n\t\t}\n\t\tR = float64ToFloat32( float64ToFloat32( f * f ) * float64ToFloat32( 0.5 - float64ToFloat32( ONE_THIRD * f ) ) ); // eslint-disable-line max-len\n\t\tif ( k === 0 ) {\n\t\t\treturn float64ToFloat32( f - R );\n\t\t}\n\t\tdk = k;\n\t\treturn float64ToFloat32( float64ToFloat32( dk * LN2_HI ) - float64ToFloat32( float64ToFloat32( R - float64ToFloat32( dk * LN2_LO ) ) - f ) ); // eslint-disable-line max-len\n\t}\n\ts = float64ToFloat32( f / float64ToFloat32( 2.0 + f ) );\n\tdk = k;\n\tz = float64ToFloat32( s * s );\n\ti = float64ToFloat32( ix - ( 0x6147a << 3 ) );\n\tw = float64ToFloat32( z * z );\n\tj = float64ToFloat32( ( 0x6b851 << 3 ) - ix );\n\tt1 = float64ToFloat32( w * float64ToFloat32( polyvalP( w ) ) );\n\tt2 = float64ToFloat32( z * float64ToFloat32( polyvalQ( w ) ) );\n\ti |= j;\n\tR = float64ToFloat32( t2 + t1 );\n\tif ( i > 0 ) {\n\t\thfsq = float64ToFloat32( 0.5 * float64ToFloat32( f * f ) );\n\t\tif ( k === 0 ) {\n\t\t\treturn float64ToFloat32( f - float64ToFloat32( hfsq - float64ToFloat32( s * float64ToFloat32( hfsq + R ) ) ) ); // eslint-disable-line max-len\n\t\t}\n\t\treturn float64ToFloat32( float64ToFloat32( dk * LN2_HI ) - float64ToFloat32( float64ToFloat32( hfsq - float64ToFloat32( ( s * float64ToFloat32( hfsq + R ) ) + float64ToFloat32( dk * LN2_LO ) ) ) - f ) ); // eslint-disable-line max-len\n\t}\n\tif ( k === 0 ) {\n\t\treturn float64ToFloat32( f - float64ToFloat32( s * float64ToFloat32( f - R ) ) ); // eslint-disable-line max-len\n\t}\n\treturn float64ToFloat32( float64ToFloat32( dk * LN2_HI ) - float64ToFloat32( float64ToFloat32( float64ToFloat32( s * float64ToFloat32( f - R ) ) - float64ToFloat32( dk * LN2_LO ) ) - f ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = lnf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the natural logarithm of a single-precision floating-point number.\n*\n* @module @stdlib/math-base-special-lnf\n*\n* @example\n* var lnf = require( '@stdlib/math-base-special-lnf' );\n*\n* var v = lnf( 4.0 );\n* // returns ~1.386\n*\n* v = lnf( 0.0 );\n* // returns -Infinity\n*\n* v = lnf( Infinity );\n* // returns Infinity\n*\n* v = lnf( NaN );\n* // returns NaN\n*\n* v = lnf( -4.0 );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_polyval_p", "__commonJSMin", "exports", "module", "evalpoly", "x", "require_polyval_q", "__commonJSMin", "exports", "module", "evalpoly", "x", "require_main", "__commonJSMin", "exports", "module", "toWordf", "fromWordf", "isnan", "NINF", "FLOAT32_EXPONENT_MASK", "FLOAT32_EXPONENT_BIAS", "FLOAT32_SIGNIFICAND_MASK", "float64ToFloat32", "polyvalP", "polyvalQ", "LN2_HI", "LN2_LO", "TWO25", "ONE_THIRD", "lnf", "x", "hfsq", "ix", "t2", "t1", "dk", "k", "R", "f", "i", "j", "s", "w", "z", "main"]
}
