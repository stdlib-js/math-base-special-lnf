{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/polyval_p.js","../lib/polyval_q.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/12.2.0/lib/msun/src/e_logf.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport toWordf from '@stdlib/number-float32-base-to-word';\nimport fromWordf from '@stdlib/number-float32-base-from-word';\nimport isnanf from '@stdlib/math-base-assert-is-nanf';\nimport NINF from '@stdlib/constants-float32-ninf';\nimport FLOAT32_EXPONENT_MASK from '@stdlib/constants-float32-exponent-mask';\nimport FLOAT32_EXPONENT_BIAS from '@stdlib/constants-float32-exponent-bias';\nimport FLOAT32_SIGNIFICAND_MASK from '@stdlib/constants-float32-significand-mask';\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport polyvalP from './polyval_p.js';\nimport polyvalQ from './polyval_q.js';\n\n\n// VARIABLES //\n\nvar LN2_HI = 6.9313812256e-01; // 0x3f317180\nvar LN2_LO = 9.0580006145e-06; // 0x3717f7d1\nvar TWO25 = 3.355443200e+07;   // 0x4c000000\nvar ONE_THIRD = 0.33333333333333333;\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of a single-precision floating-point number.\n*\n* @param {NonNegativeNumber} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = lnf( 4.0 );\n* // returns ~1.386\n*\n* @example\n* var v = lnf( 0.0 );\n* // returns -Infinity\n*\n* @example\n* var v = lnf( Infinity );\n* // returns Infinity\n*\n* @example\n* var v = lnf( NaN );\n* // returns NaN\n*\n* @example\n* var v = lnf( -4.0 );\n* // returns NaN\n*/\nfunction lnf( x ) {\n\tvar hfsq;\n\tvar ix;\n\tvar t2;\n\tvar t1;\n\tvar k;\n\tvar R;\n\tvar f;\n\tvar i;\n\tvar j;\n\tvar s;\n\tvar w;\n\tvar z;\n\n\tif ( x === 0.0 ) {\n\t\treturn NINF;\n\t}\n\tif ( isnanf( x ) || x < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tx = float64ToFloat32( x );\n\tix = toWordf( x );\n\tk = 0;\n\n\t// x < 2**-126\n\tif ( ix < 0x00800000 ) {\n\t\tk -= 25;\n\n\t\t// Subnormal number, scale up x\n\t\tx = float64ToFloat32( x * TWO25 );\n\t\tix = toWordf( x );\n\t}\n\tif ( ix >= FLOAT32_EXPONENT_MASK ) {\n\t\treturn float64ToFloat32( x + x );\n\t}\n\tk = float64ToFloat32( k + float64ToFloat32( ( ix >> 23 ) - FLOAT32_EXPONENT_BIAS ) ); // eslint-disable-line max-len\n\tix &= FLOAT32_SIGNIFICAND_MASK;\n\ti = ( ix + ( 0x95f64 << 3 ) ) & 0x800000;\n\n\t// Normalize x or x/2\n\tx = fromWordf( ix | ( i ^ 0x3f800000 ) );\n\tk = float64ToFloat32( k + ( i >> 23 ) );\n\tf = float64ToFloat32( x - 1.0 );\n\n\t// -2**-9 <= f < 2**-9\n\tif ( ( FLOAT32_SIGNIFICAND_MASK & float64ToFloat32( 0x8000 + ix ) ) < 0xc000 ) { // eslint-disable-line max-len\n\t\tif ( f === 0.0 ) {\n\t\t\tif ( k === 0 ) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\treturn float64ToFloat32( float64ToFloat32( k * LN2_HI ) + float64ToFloat32( k * LN2_LO ) ); // eslint-disable-line max-len\n\t\t}\n\t\tR = float64ToFloat32( float64ToFloat32( f * f ) * float64ToFloat32( 0.5 - float64ToFloat32( ONE_THIRD * f ) ) ); // eslint-disable-line max-len\n\t\tif ( k === 0 ) {\n\t\t\treturn float64ToFloat32( f - R );\n\t\t}\n\t\treturn float64ToFloat32( float64ToFloat32( k * LN2_HI ) - float64ToFloat32( float64ToFloat32( R - float64ToFloat32( k * LN2_LO ) ) - f ) ); // eslint-disable-line max-len\n\t}\n\ts = float64ToFloat32( f / float64ToFloat32( 2.0 + f ) );\n\tz = float64ToFloat32( s * s );\n\ti = ix - ( 0x6147a << 3 );\n\tw = float64ToFloat32( z * z );\n\tj = ( 0x6b851 << 3 ) - ix;\n\tt1 = float64ToFloat32( w * float64ToFloat32( polyvalP( w ) ) );\n\tt2 = float64ToFloat32( z * float64ToFloat32( polyvalQ( w ) ) );\n\ti |= j;\n\tR = float64ToFloat32( t2 + t1 );\n\tif ( i > 0 ) {\n\t\thfsq = float64ToFloat32( 0.5 * float64ToFloat32( f * f ) );\n\t\tif ( k === 0 ) {\n\t\t\treturn float64ToFloat32( f - float64ToFloat32( hfsq - float64ToFloat32( s * float64ToFloat32( hfsq + R ) ) ) ); // eslint-disable-line max-len\n\t\t}\n\t\treturn float64ToFloat32( float64ToFloat32( k * LN2_HI ) - float64ToFloat32( float64ToFloat32( hfsq - float64ToFloat32( ( s * float64ToFloat32( hfsq + R ) ) + float64ToFloat32( k * LN2_LO ) ) ) - f ) ); // eslint-disable-line max-len\n\t}\n\tif ( k === 0 ) {\n\t\treturn float64ToFloat32( f - float64ToFloat32( s * float64ToFloat32( f - R ) ) ); // eslint-disable-line max-len\n\t}\n\treturn float64ToFloat32( float64ToFloat32( k * LN2_HI ) - float64ToFloat32( float64ToFloat32( float64ToFloat32( s * float64ToFloat32( f - R ) ) - float64ToFloat32( k * LN2_LO ) ) - f ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default lnf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.40000972152;\n\t}\n\treturn 0.40000972152 + (x * 0.24279078841);\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.66666662693;\n\t}\n\treturn 0.66666662693 + (x * 0.28498786688);\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n"],"names":["LN2_HI","LN2_LO","lnf","x","hfsq","ix","t2","t1","k","R","f","i","j","s","w","z","NINF","isnanf","NaN","float64ToFloat32","toWordf","FLOAT32_EXPONENT_MASK","FLOAT32_EXPONENT_BIAS","fromWordf","FLOAT32_SIGNIFICAND_MASK","polyvalP","polyvalQ"],"mappings":";;4zBAkDA,IAAIA,EAAS,aACTC,EAAS,gBAiCb,SAASC,EAAKC,GACb,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,OAAW,IAANZ,EACGa,EAEHC,EAAQd,IAAOA,EAAI,EAChBe,KAERf,EAAIgB,EAAkBhB,GAEtBK,EAAI,GADJH,EAAKe,EAASjB,IAIJ,UACTK,GAAK,GAGLL,EAAIgB,EA7DM,SA6DYhB,GACtBE,EAAKe,EAASjB,IAEVE,GAAMgB,EACHF,EAAkBhB,EAAIA,IAE9BK,EAAIW,EAAkBX,EAAIW,GAAoBd,GAAM,IAAOiB,IAK3DnB,EAAIoB,GAJJlB,GAAMmB,GAIoB,YAH1Bb,EAAMN,EAAE,QAAwB,UAIhCG,EAAIW,EAAkBX,GAAMG,GAAK,KACjCD,EAAIS,EAAkBhB,EAAI,IAGnBqB,EAA2BL,EAAkB,MAASd,IAAS,MAC1D,IAANK,EACO,IAANF,EACG,EAEDW,EAAkBA,EAAkBX,EAAIR,GAAWmB,EAAkBX,EAAIP,KAEjFQ,EAAIU,EAAkBA,EAAkBT,EAAIA,GAAMS,EAAkB,GAAMA,EAnF5D,kBAmF0FT,KAEhGS,EADG,IAANX,EACqBE,EAAID,EAELU,EAAkBX,EAAIR,GAAWmB,EAAkBA,EAAkBV,EAAIU,EAAkBX,EAAIP,IAAaS,MAEtIG,EAAIM,EAAkBT,EAAIS,EAAkB,EAAMT,IAClDK,EAAII,EAAkBN,EAAIA,GAC1BF,EAAIN,EAAE,QACNS,EAAIK,EAAkBJ,EAAIA,GAC1BH,EAAI,QAAmBP,EACvBE,EAAKY,EAAkBL,EAAIK,EC/G5B,SAAmBhB,GAClB,OAAW,IAANA,EACG,aAED,aAAqB,aAAJA,CACzB,CD0G8CsB,CAAUX,KACvDR,EAAKa,EAAkBJ,EAAII,EEhH5B,SAAmBhB,GAClB,OAAW,IAANA,EACG,aAED,aAAqB,aAAJA,CACzB,CF2G8CuB,CAAUZ,KACvDH,GAAKC,EACLH,EAAIU,EAAkBb,EAAKC,GACtBI,EAAI,GACRP,EAAOe,EAAkB,GAAMA,EAAkBT,EAAIA,IAE7CS,EADG,IAANX,EACqBE,EAAIS,EAAkBf,EAAOe,EAAkBN,EAAIM,EAAkBf,EAAOK,KAE7EU,EAAkBX,EAAIR,GAAWmB,EAAkBA,EAAkBf,EAAOe,EAAoBN,EAAIM,EAAkBf,EAAOK,GAAQU,EAAkBX,EAAIP,KAAeS,KAG5LS,EADG,IAANX,EACqBE,EAAIS,EAAkBN,EAAIM,EAAkBT,EAAID,IAEjDU,EAAkBX,EAAIR,GAAWmB,EAAkBA,EAAkBA,EAAkBN,EAAIM,EAAkBT,EAAID,IAAQU,EAAkBX,EAAIP,IAAaS,MACtL"}